
/* This program was written to use a node tree data structure and use the tools of said data structure

This is a multi-file java program that is smahsed into one, I will commit where the seperate classes start*/

package program7;

import java.util.Scanner;
import java.util.*;
import java.util.Random;
public class Program7 {
	
	static Scanner kb =new Scanner(System.in);
	
	public static void main(String[] args) {
		int choice;
		
	do
	{
	System.out.println("Please select one of the following options.");
	System.out.println("1. use the tools of the table");
	System.out.println("2. create 10 tables to calculate the worst "
						+ "case retrieval time");
	System.out.println("3. quit the program");
	
	choice=kb.nextInt();
	if(choice<1 || choice >3)
		{System.out.println("Please enter 1,2 or 3.");}

	if(choice==1)
		{optionOne();}
	
	else if(choice==2)
		{optionTwo();}
	
	}while(choice !=3 );
}
	
public static void optionTwo(){
	Random rand=new Random();
	
	int height=0;
	
	for(int i=2;i<=32768;i=i*2){

		for(int ix=0;ix<10;++ix){
			Table tree=new Table();
			
			for(int ixx=0;ixx<i;ixx++){
				
				int number=rand.nextInt();
				KeyableNumber num= new KeyableNumber(number);
				tree.insert(num);
				}
			
		if(height<tree.getHeight())
			{height=tree.getHeight();}
		}
		
	System.out.print("The worst case performance:");
	System.out.println(height);
	}
}
public static void optionOne() {	
	int choice;
	Table table = new Table();
		
	do
	{
	System.out.println("Please select one of the following options...");
	System.out.println("1: initialize an empty Table.");
	System.out.println("2: insert an item in the Table.");
	System.out.println("3: delete an item in the Table.");
	System.out.println("4: search an item in the Table.");
	System.out.println("5: get height of the tree.");
	System.out.println("6: get size of the number of nodes.");
	System.out.println("7: display the contents of the table in tree form.");
	System.out.println("8: display the contents in order by their keys.");
	System.out.println("9: quit program.");
		choice=kb.nextInt();
		
		
	if(choice<1 || choice>9){
		System.out.println("Please enter a number between one and ten.");
		}
	
	if (choice==1){
		Table newTable=new Table();
		table = newTable;
		}
	
	else if(choice==2)	{
		String teamName,name;
		int number;
		double score;
		
		System.out.println("Please enter the jersey number.");
			number=kb.nextInt();
			
		System.out.println("Please enter the scoring avg for that player.");
			score=kb.nextDouble();
			
		System.out.println("Please enter the team name.");
			teamName=kb.next();
			
		System.out.println("Please enter the name of the player.");
			name=kb.next();
		
		NBAPlayer player = new NBAPlayer(name,score,number,teamName);
		table.insert(player);
		
		System.out.println(name + " sucessfully inserted");
		}
	
	else if(choice==3){
		TreeNode search = null;
		String teamName;
		int jerseyNumber;
		
		System.out.println("Please enter the name of team you wish to "
							+ "delete.");
			teamName=kb.next();
			
		System.out.println("Enter the jersey number of the player.");
			jerseyNumber=kb.nextInt();
		NBAPlayerKey key = new NBAPlayerKey(jerseyNumber,teamName);
		
		search = table.delete(key);
		
	System.out.println(jerseyNumber + "from "+teamName+" Successfully deleted");
		}
	else if(choice==4){
		String teamName;
		Keyable search;
		int number;
		
		System.out.println("Please enter the jersey number.");
			number=kb.nextInt();
		System.out.println("Please enter the team name.");
			teamName=kb.next();
			
		NBAPlayerKey key=new NBAPlayerKey(number,teamName);
		search=table.search(key);
		
		if(search == null)
			{System.out.println("Not found");}
		
		else{
		System.out.println("Match Found");
		System.out.println(search.toString());
		}
	}
		else if(choice==5)
			{System.out.println(table.getHeight());}
	
		else if(choice==6)
			{System.out.println(table.getSize());}
	
		else if(choice==7){
		System.out.println("\n\n");
		System.out.println(table.showTree());
		}
	
		else if(choice==8)
			{System.out.println(table.toString());}
	
		}while(choice!=9);

	}	
}

///////////////////TableClass//////////////////
package program7;

import java.util.Scanner;
import java.util.*;
import java.util.Random;

interface Keyable
{

public int keyCompareTo(Keyable other);

public String toStringKey();

}
public class Table
{
	private TreeNode _root;
	
	
public Table(){
	_root=null;
	}

public Keyable search(Keyable key){

	return search(_root,key);
}

private Keyable search(TreeNode myRoot,Keyable key){

	if(myRoot==null) return null;
	
	else{
	int compare=key.keyCompareTo(myRoot.data);
	if(compare==0){	
		return myRoot.data;
		}
	
		else if(compare<0){
			return search(myRoot.left,key);
		}
	
		else{
			return search(myRoot.right,key);
			}
		}
}
public void insert(Keyable item){

	_root=insertRoot(_root,item);
}

private TreeNode insertRoot(TreeNode myRoot,Keyable item){
	if(myRoot==null){
		myRoot=new TreeNode();
		myRoot.data=item;
		myRoot.left=myRoot.right=null;
		return myRoot;
		}
	
	else
	{
		int comp=item.keyCompareTo(myRoot.data);

		if(comp<0)
		{
			myRoot.left=insertRoot(myRoot.left,item);
		}
		else if(comp>0)
		{
			myRoot.right=insertRoot(myRoot.right,item);
		}
		return myRoot;
	}

}

private TreeNode getMax(TreeNode myRoot){
TreeNode result;

	if(myRoot.right==null){
		result=myRoot;
		myRoot=null;
		return result;
	}
	else
		{return getMax(myRoot.right);}
}

public TreeNode delete(Keyable key){

	return delete(_root,key);
}

private TreeNode delete(TreeNode myRoot,Keyable key){
	if(myRoot==null)	return null;
	
		
	int compare = key.keyCompareTo(myRoot.data);
	
	if(compare == 0){
		
		if(myRoot.left==null && myRoot.right==null){
			return null;
		}
		
		else if(myRoot.left==null && myRoot.right!=null){
			return myRoot.right;
		}
		
		else if(myRoot.right==null && myRoot.left!=null){
			return myRoot.left;
		}
		
		else{
			TreeNode replace=getMax(myRoot.left);
			myRoot.data=replace.data;
			myRoot.left=delete(myRoot.left,replace.data);
			return myRoot;
			}
		}
	else if(compare <0){
		myRoot.left= delete(myRoot.left,key);
		return myRoot;
	}
	
	else{
		myRoot.right= delete(myRoot.right,key);
		return myRoot;
		}
	}

public int getSize(){	
	return sizeRoot(_root);
}

private int sizeRoot(TreeNode myRoot){

	if(myRoot==null)	return 0;

	else
		return 1+sizeRoot(myRoot.left)+sizeRoot(myRoot.right);
}

public int getHeight(){
	return height(_root);
}

private int height(TreeNode myRoot){

	if(myRoot==null)	return 0;

return (1+Math.max(height(myRoot.left),height(myRoot.right)));
}

public String showTree(){
	return showTree(_root,0);
}

private String showTree(TreeNode myRoot,int myLevel){
	String s="";
	
	if(myRoot!=null){
		s=s+showTree(myRoot.right,myLevel+1);
		
			for(int i=0;i<myLevel;++i)
				{s=s+"\t";}
			
		s=s+myRoot.data.toStringKey()+"\n";
		myLevel=0;
		s=s+showTree(myRoot.left,myLevel+1);
		s=s+"\n";
		}

return s;
}

private String toString(TreeNode myRoot){
	String s="";
	
		if(myRoot!=null){
			s=s+toString(myRoot.left);
			s=s+myRoot.data.toString();
			s=s+toString(myRoot.right);
			}
		return s;
	}

public String toString(){
	String s="";
	s=s+toString(_root);
	return s;
	}
}

//////////////////////Start of TreeNode Class//////////////////
package program7;

class TreeNode{
	public Keyable data;
	public TreeNode left;
	public TreeNode right;
	}

/////////////Start of NBAPlayer Class//////////////////

class NBAPlayer extends NBAPlayerKey implements Keyable
{
private String _name;
private double _scoringAVG;

public NBAPlayer(String name,double scoringAVG,int jerseyNumber,
				String teamName){
			
		super(jerseyNumber,teamName);
		_name=name;
		_scoringAVG=scoringAVG;
}

public String getName(){
	return _name;
}

public double getScoringAVG(){
	return _scoringAVG;
}

public String toString(){
	String s="";
	s=s+super.toString();
	s=s+_name+" ";
	s=s+_scoringAVG+"\n";
	return s;
	}
}

class NBAPlayerKey implements Keyable{
	
	private int _jerseyNumber;
	private String _teamName;

NBAPlayerKey(int number,String name){
	_jerseyNumber=number;
	_teamName=name;
}

public int getJerseyNumber(){
	return _jerseyNumber;
}

public String getTeamName(){
	return _teamName;
}

public int keyCompareTo(Keyable other){
	
	if(other instanceof NBAPlayerKey){
		NBAPlayerKey key=(NBAPlayerKey) other;

		if(key.getJerseyNumber()<_jerseyNumber) 
			{return 1;}
		
		else if(key.getJerseyNumber()>_jerseyNumber)
			{return -1;}
		else{
			int result=_teamName.compareTo(key.getTeamName()); 
			return result;
			}
	}
	return 0;
}

public String toStringKey(){
	String s="";
	s=s+_jerseyNumber+" "+_teamName.substring(0,3)+"\n";
	return s;
}
public String toString(){
	String s="";
	s=s+_jerseyNumber+" "+_teamName.substring(0,3)+"\n";
	return s;
	}
}

class KeyableNumber implements Keyable{
	
	private int _number;

public KeyableNumber(int number){
	_number=number;
}

public int getKeyableNumber(){
	return _number;
}

public int keyCompareTo(Keyable other){
	
	if(other instanceof KeyableNumber){
		KeyableNumber key = (KeyableNumber) other;

		if(key.getKeyableNumber()<_number) 
			{return 1;}
		
		else if(key.getKeyableNumber()>_number)
			{return -1;}
		}
	else
		{return 0;}

return 0;
}

public String toStringKey(){
	String s="";
	s=s+_number;
	return s;
}
}
